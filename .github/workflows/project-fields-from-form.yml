name: Sync issue form to Project fields (no labels)

on:
  issues:
    types: [opened, edited]   # Ïù¥Ïäà ÏÉùÏÑ±/ÏàòÏ†ï ÏãúÎßàÎã§ Î∞òÏòÅ

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      # === ÌîÑÎ°úÏ†ùÌä∏ ÏßÄÏ†ï ===
      USER: "hwijae33"            # Í∞úÏù∏ ÌîÑÎ°úÏ†ùÌä∏Î©¥ ÏÇ¨Ïö©Ïûê Î°úÍ∑∏Ïù∏
      PROJECT_NUMBER: "4"         # ÌîÑÎ°úÏ†ùÌä∏ Î≤àÌò∏ (URL ÎßàÏßÄÎßâ Ïà´Ïûê)

      # === ÌîÑÎ°úÏ†ùÌä∏ ÌïÑÎìúÎ™Ö (ProjectsÏùò Custom fieldsÏôÄ Ï≤†Ïûê ÏùºÏπò) ===
      PRIORITY_FIELD_NAME: "Priority"
      COMPONENT_FIELD_NAME: "Component"
      STORYPOINTS_FIELD_NAME: "Story Points"
      DUEDATE_FIELD_NAME: "Due Date"
      AREA_FIELD_NAME: "Area"
      REVIEW_FIELD_NAME: "Review Status"
      TABLES_FIELD_NAME: "Tables"   # (ÏÑ†ÌÉù) Ï≤¥ÌÅ¨Î∞ïÏä§ Í≤∞Í≥º Ï†ÄÏû•Ïö© Text ÌïÑÎìú. ÎßåÎì§ÏßÄ ÏïäÏúºÎ©¥ Îπà Í∞íÏù¥Îùº Ïä§ÌÇµÎê®.

      # === Í∏∞Î≥∏Í∞í ÏòµÏÖò ===
      REVIEW_DEFAULT: "Pending"     # ÌèºÏóêÏÑú ÎπÑÏõåÏò® Í≤ΩÏö∞ Í∏∞Î≥∏ Î¶¨Î∑∞ ÏÉÅÌÉú

    steps:
      - name: Apply Project field values from issue form
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}  # PAT: repo + project (+ read:org), SSO Authorize
          script: |
            const gql = github.graphql;
            const ops = [];
            
            // === 0) ÌîÑÎ°úÏ†ùÌä∏/ÌïÑÎìú Î©îÌÉÄ Ï°∞Ìöå (Org) ===
            const org = process.env.ORG.trim();
            const projectNumber = Number(process.env.PROJECT_NUMBER);
            
            const data = await gql(`
              query($org:String!, $num:Int!) {
                organization(login:$org){
                  projectV2(number:$num){
                    id
                    title
                    fields(first:100){
                      nodes{
                        ... on ProjectV2FieldCommon       { id name }
                        ... on ProjectV2SingleSelectField { id name options { id name } }
                      }
                    }
                  }
                }
              }
            `, { org, num: projectNumber });
            
            const project = data.organization?.projectV2;
            if (!project) { core.setFailed("Project not found. Check ORG/PROJECT_NUMBER."); return; }
            const fields = project.fields.nodes;
            const byName = (n) => fields.find(f => f && f.name === n);
            
            const fPriority  = byName(process.env.PRIORITY_FIELD_NAME);
            const fComponent = byName(process.env.COMPONENT_FIELD_NAME);
            const fSP        = byName(process.env.STORYPOINTS_FIELD_NAME);
            const fDue       = byName(process.env.DUEDATE_FIELD_NAME);
            const fArea      = byName(process.env.AREA_FIELD_NAME);
            const fReview    = byName(process.env.REVIEW_FIELD_NAME);
            const fTables    = byName(process.env.TABLES_FIELD_NAME); // Text (optional)
            
            // === 1) Ïù¥Ïäà Î≥∏Î¨∏ ÌååÏã± (Issue Forms) ===
            const issue = context.payload.issue;
            const body = issue.body || "";
            
            // ÏÑπÏÖò ÎùºÎ≤®(Ï†úÎ™©)Ïóê Í∏∞Î∞òÌïú ÌååÏÑú ‚Äî ÎùºÎ≤® Ï≤†Ïûê Í∑∏ÎåÄÎ°ú Ïú†ÏßÄÌï¥Ïïº Ìï®
            const pick = (label) => {
              const re = new RegExp(`^###\\s*${label}\\s*\\n+([\\s\\S]*?)(?=\\n###|$)`, "m");
              const m = body.match(re);
              return m ? m[1].trim() : "";
            };
            // Ï≤¥ÌÅ¨Î∞ïÏä§ ÏÑπÏÖòÏóêÏÑú Ï≤¥ÌÅ¨Îêú Ìï≠Î™©Îßå Ï∂îÏ∂ú (- [x] label)
            const pickMulti = (label) => {
              const sec = body.match(new RegExp(`^###\\s*${label}[\\s\\S]*?(?=\\n###|$)`, "m"));
              if (!sec) return [];
              return [...sec[0].matchAll(/- \\[x\\] (.+)/g)].map(m => m[1].trim());
            };
            
            const vPriority   = pick("Priority");            // Single select ÌÖçÏä§Ìä∏
            const vComponent  = pick("Component");           // Single select ÌÖçÏä§Ìä∏ (ÌÖåÏù¥Î∏îÎ™Ö)
            const vArea       = pick("Area");                // Single select ÌÖçÏä§Ìä∏
            const vSPraw      = pick("Story Points");        // "1" .. "13" (Î¨∏ÏûêÏó¥Ïùº Ïàò ÏûàÏùå)
            const vReview     = pick("Review Status") || process.env.REVIEW_DEFAULT;
            const tablesArr   = pickMulti("Affected Tables"); // Ï≤¥ÌÅ¨Îêú ÎùºÎ≤® Î∞∞Ïó¥
            
            // Due date Ï°∞Ìï© (BÏïà: ÎìúÎ°≠Îã§Ïö¥ 3Í∞ú)
            const y = pick("Due Year"), m = pick("Due Month"), d = pick("Due Day");
            let iso = "";
            if (y && m && d) {
              const MM = m.padStart(2,"0"); const DD = d.padStart(2,"0");
              const test = new Date(`${y}-${MM}-${DD}T00:00:00Z`);
              if (!Number.isNaN(test.getTime())) iso = `${y}-${MM}-${DD}`;
              else ops.push(`‚ö†Ô∏è Due Date invalid: ${y}-${m}-${d}`);
            }
            const vSP = Number(vSPraw);
            
            // === 2) Ïù¥Ïäà ‚Üí ÌîÑÎ°úÏ†ùÌä∏ ÏïÑÏù¥ÌÖú Î≥¥Ïû• ===
            const resIssue = await gql(`
              query($id:ID!){
                node(id:$id){
                  ... on Issue {
                    id number
                    projectItems(first:30){ nodes { id project { id } } }
                  }
                }
              }`, { id: issue.node_id });
            const issueNode = resIssue.node;
            
            let itemId = issueNode.projectItems.nodes.find(n => n.project.id === project.id)?.id;
            if (!itemId) {
              const add = await gql(`
                mutation($pid:ID!,$content:ID!){
                  addProjectV2ItemById(input:{projectId:$pid, contentId:$content}) {
                    item { id }
                  }
                }`, { pid: project.id, content: issueNode.id });
              itemId = add.addProjectV2ItemById.item.id;
              ops.push(`‚ûï Added to project "${project.title}" (Issue #${issueNode.number})`);
            } else {
              ops.push(`‚úì Already in project "${project.title}" (Issue #${issueNode.number})`);
            }
            
            // === 3) ÏóÖÎç∞Ïù¥Ìä∏ Ïú†Ìã∏ (GraphQL ÌÉÄÏûÖ ÎßûÏ∂§) ===
            const updateSelect = async (field, valueText, label) => {
              if (!field?.options?.length || !valueText) return;
              const opt = field.options.find(o => o.name === valueText);
              if (!opt) { ops.push(`‚ö†Ô∏è ${label}: option "${valueText}" not found`); return; }
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$opt:ID!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ singleSelectOptionId:$opt }
                  }){ projectV2Item { id } }
                }`, { pid: project.id, item: itemId, fid: field.id, opt: opt.id });
              ops.push(`üîÅ ${label} ‚Üí ${valueText}`);
            };
            const updateNumber = async (field, num, label) => {
              if (!field || Number.isNaN(num)) return;
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$val:Float!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ number:$val }
                  }){ projectV2Item { id } }
                }`, { pid: project.id, item: itemId, fid: field.id, val: num });
              ops.push(`üîÅ ${label} ‚Üí ${num}`);
            };
            const updateDate = async (field, dateISO, label) => {
              if (!field || !dateISO) return;
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$date:Date!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ date:$date }
                  }){ projectV2Item { id } }
                }`, { pid: project.id, item: itemId, fid: field.id, date: dateISO });
              ops.push(`üîÅ ${label} ‚Üí ${dateISO}`);
            };
            const updateText = async (field, text, label) => {
              if (!field || !text) return;
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$txt:String!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ text:$txt }
                  }){ projectV2Item { id } }
                }`, { pid: project.id, item: itemId, fid: field.id, txt: text });
              ops.push(`üîÅ ${label} ‚Üí ${text}`);
            };
            
            // === 4) Ïã§Ï†ú ÏóÖÎç∞Ïù¥Ìä∏ ===
            await updateSelect(fPriority,  vPriority,  "Priority");
            await updateSelect(fComponent, vComponent, "Component");
            await updateSelect(fArea,      vArea,      "Area");
            await updateSelect(fReview,    vReview,    "Review Status");
            await updateNumber(fSP, vSP, "Story Points");
            if (iso) await updateDate(fDue, iso, "Due Date");
            if (fTables && tablesArr.length) await updateText(fTables, tablesArr.join(", "), "Tables");
            
            // === ÏöîÏïΩ ===
            const summary = ops.length ? ops.join('\n') : 'No field changes.';
            console.log(summary);
            await core.summary.addHeading('Project sync result')
              .addRaw(summary.replace(/\n/g,'<br/>'))
              .write();