name: Sync issue form to Project fields (USER test)

on:
  issues:
    types: [opened, edited]

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      # === Í∞úÏù∏ ÌîÑÎ°úÏ†ùÌä∏Ïö© ÏÑ§Ï†ï (USERÎßå! ORGÎäî ÎπÑÏõåÎëêÏÑ∏Ïöî) ===
      USER: "hwijae33"            # ‚Üê Î≥∏Ïù∏ ÏÇ¨Ïö©Ïûê
      PROJECT_NUMBER: "4"         # ‚Üê Î≥∏Ïù∏ Í∞úÏù∏ Projects Î≤àÌò∏

      # === Projects ÌïÑÎìúÎ™Ö (Î≥¥ÎìúÏùò ÌïÑÎìúÎ™ÖÍ≥º Ï≤†Ïûê ÎèôÏùº) ===
      PRIORITY_FIELD_NAME: "Priority"
      COMPONENT_FIELD_NAME: "Component"
      CHANGE_TYPE_FIELD_NAME: "Change Type"
      DUEDATE_FIELD_NAME: "Due Date"
      # REVIEW_FIELD_NAME: "Review Status"   # Ïì∞Î©¥ Ï£ºÏÑù Ìï¥Ï†ú
      # REVIEW_DEFAULT: "Pending"

    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}   # Projects write Í∂åÌïú ÏûàÎäî PAT/Ïï± ÌÜ†ÌÅ∞
          script: |
            const gql = github.graphql;
            const ops = [];

            // === 0) ÌîÑÎ°úÏ†ùÌä∏ Î©îÌÉÄ Ï°∞Ìöå (USER Ï†ÑÏö©) ===
            const userLogin = (process.env.USER || "").trim();
            const projectNumber = Number(process.env.PROJECT_NUMBER || "0");
            if (!userLogin)   { core.setFailed("USER is empty"); return; }
            if (!projectNumber){ core.setFailed("PROJECT_NUMBER is empty/invalid"); return; }

            const resUser = await gql(`
              query($login:String!, $num:Int!) {
                user(login:$login){
                  projectV2(number:$num){
                    id title
                    fields(first:100){
                      nodes{
                        ... on ProjectV2FieldCommon       { id name }
                        ... on ProjectV2SingleSelectField { id name options { id name } }
                      }
                    }
                  }
                }
              }
            `, { login: userLogin, num: projectNumber });

            const project = resUser?.user?.projectV2;
            if (!project) { core.setFailed("Project not found. Check USER/PROJECT_NUMBER."); return; }
            const fields = project.fields.nodes;
            const byName = (n) => fields.find(f => f && f.name === n);

            const fPriority   = byName(process.env.PRIORITY_FIELD_NAME);
            const fComponent  = byName(process.env.COMPONENT_FIELD_NAME);
            const fChangeType = byName(process.env.CHANGE_TYPE_FIELD_NAME);
            const fDue        = byName(process.env.DUEDATE_FIELD_NAME);
            const fReview     = byName(process.env.REVIEW_FIELD_NAME);

            // === 1) Ïù¥Ïäà Ìèº Î≥∏Î¨∏ ÌååÏã± ===
            const issue = context.payload.issue;
            const body  = issue.body || "";

            const pick = (label) => {
              const re = new RegExp(`^###\\s*${label}\\s*\\n+([\\s\\S]*?)(?=\\n###|$)`, "m");
              const m = body.match(re);
              return m ? m[1].trim() : "";
            };

            const vPriority   = pick("Priority");
            const vComponent  = pick("Component");
            const vChangeType = pick("Change Type");
            const vDue        = pick("Due Date");   // YYYY-MM-DD Í∏∞ÎåÄ

            // === 2) Ïù¥Ïäà ‚Üí ÌîÑÎ°úÏ†ùÌä∏ ÏïÑÏù¥ÌÖú Î≥¥Ïû• ===
            const resIssue = await gql(`
              query($id:ID!){
                node(id:$id){
                  ... on Issue {
                    id number
                    projectItems(first:30){ nodes { id project { id } } }
                  }
                }
              }`, { id: issue.node_id });

            const issueNode = resIssue.node;
            let itemId = issueNode.projectItems.nodes.find(n => n.project.id === project.id)?.id;

            if (!itemId) {
              const add = await gql(`
                mutation($pid:ID!,$content:ID!){
                  addProjectV2ItemById(input:{projectId:$pid, contentId:$content}) {
                    item { id }
                  }
                }`, { pid: project.id, content: issueNode.id });
              itemId = add.addProjectV2ItemById.item.id;
              ops.push(`‚ûï Added to project "${project.title}" (Issue #${issueNode.number})`);
            } else {
              ops.push(`‚úì Already in project "${project.title}" (Issue #${issueNode.number})`);
            }

            // === 3) ProjectsÏùò ÌòÑÏû¨ Due Date ÏùΩÍ∏∞ (UIÏóêÏÑú ÏàòÏ†ïÌïú Í∞í Ï°¥Ï§ë) ===
            let currentDue = "";
            if (fDue) {
              const resVals = await gql(`
              query($item: ID!) {
                node(id: $item) {
                  ... on ProjectV2Item {
                  fieldValues(first: 50) {
                    nodes {
                    ... on ProjectV2ItemFieldDateValue {
                    date
                    field {
                    ... on ProjectV2FieldCommon { id name }   # Ïù∏ÌÑ∞ÌéòÏù¥Ïä§/Íµ¨ÌòÑÏ≤¥Ïóê fragmentÎ°ú ÏÑ†ÌÉù
                    }
                    }
                    }
                }
                }
              }
            }`, { item: itemId });

              currentDue = resVals?.node?.fieldValues?.nodes
                ?.find(n => n?.field?.id === fDue?.id)?.date || "";
            }

            // === 4) Due Date Í≤∞Ï†ï (Í∞ÄÎìú) ===
            let isoDue = "";
            if (/^\d{4}-\d{2}-\d{2}$/.test(vDue)) {
              const test = new Date(`${vDue}T00:00:00Z`);
              if (!Number.isNaN(test.getTime())) isoDue = vDue;
              else ops.push(`‚ö†Ô∏è Due Date invalid date: ${vDue}`);
            } else if (!vDue && !currentDue) {
              const todayKST = new Date().toLocaleString('sv-SE', { timeZone: 'Asia/Seoul' }).slice(0,10);
              isoDue = todayKST;
              ops.push(`‚ÑπÔ∏è Due Date empty ‚Üí defaulting to ${isoDue} (KST today)`);
            }

            // === 5) ÌïÑÎìú ÏóÖÎç∞Ïù¥Ìä∏ ===
            const updateSelect = async (field, valueText, label) => {
              if (!field?.options?.length || !valueText) return;
              const opt = field.options.find(o => o.name === valueText);
              if (!opt) { ops.push(`‚ö†Ô∏è ${label}: option "${valueText}" not found`); return; }
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$opt:String!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ singleSelectOptionId:$opt }
                  }){ projectV2Item { id } }
                }`, { pid: project.id, item: itemId, fid: field.id, opt: opt.id });
              ops.push(`üîÅ ${label} ‚Üí ${valueText}`);
            };

            const updateDate = async (field, dateIso, label) => {
              if (!field || !dateIso) return;
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$date:Date!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ date:$date }
                  }){ projectV2Item { id } }
                }`, { pid: project.id, item: itemId, fid: field.id, date: dateIso });
              ops.push(`üîÅ ${label} ‚Üí ${dateIso}`);
            };

            await updateSelect(fPriority,   vPriority,   "Priority");
            await updateSelect(fComponent,  vComponent,  "Component");
            await updateSelect(fChangeType, vChangeType, "Change Type");

            if (isoDue && isoDue !== currentDue) {
              await updateDate(fDue, isoDue, "Due Date");
            } else if (isoDue && isoDue === currentDue) {
              ops.push(`‚úì Due Date unchanged (${currentDue})`);
            } else if (!isoDue && currentDue) {
              ops.push(`‚úì Due Date kept from project (${currentDue})`);
            }

            if (fReview?.options?.length) {
              const target = process.env.REVIEW_DEFAULT || "";
              if (target) await updateSelect(fReview, target, "Review Status");
            }

            console.log(ops.length ? ops.join('\n') : 'No field changes.');
