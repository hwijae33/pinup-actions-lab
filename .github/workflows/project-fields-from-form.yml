name: Sync issue form to Project fields (no labels)

on:
  issues:
    types: [opened, edited]   # 이슈 생성/수정 시마다 반영

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      # === 프로젝트 지정 ===
      USER: "hwijae33"            # 개인 프로젝트면 사용자 로그인
      PROJECT_NUMBER: "4"         # 프로젝트 번호 (URL 마지막 숫자)

      # === 필드 이름(프로젝트의 필드명과 철자 일치) ===
      PRIORITY_FIELD_NAME: "Priority"
      COMPONENT_FIELD_NAME: "Component"
      STORYPOINTS_FIELD_NAME: "Story Points"
      DUEDATE_FIELD_NAME: "Due Date"
      REVIEW_FIELD_NAME: "Review Status"  # (있으면) 기본값 세팅 가능
      REVIEW_DEFAULT: "Pending"           # (옵션) Review Status 기본값

    steps:
      - name: Apply Project field values from issue form
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}
          script: |
            const gql = github.graphql;
            const ops = [];

            // === 0) 프로젝트/필드 메타 조회 ===
            const userLogin = process.env.USER.trim();
            const projectNumber = Number(process.env.PROJECT_NUMBER);

            const { user } = await gql(`
              query($login:String!, $num:Int!) {
                user(login:$login){
                  projectV2(number:$num){
                    id
                    title
                    fields(first:100){
                      nodes{
                        ... on ProjectV2FieldCommon       { id name }
                        ... on ProjectV2SingleSelectField { id name options { id name } }
                      }
                    }
                  }
                }
              }
            `, { login: userLogin, num: projectNumber });

            if (!user?.projectV2) {
              core.setFailed("Project not found. Check USER/PROJECT_NUMBER.");
              return;
            }
            const project = user.projectV2;
            const fields = project.fields.nodes;
            const byName = (n) => fields.find(f => f && f.name === n);

            const fPriority  = byName(process.env.PRIORITY_FIELD_NAME);
            const fComponent = byName(process.env.COMPONENT_FIELD_NAME);
            const fSP        = byName(process.env.STORYPOINTS_FIELD_NAME);
            const fDue       = byName(process.env.DUEDATE_FIELD_NAME);
            const fReview    = byName(process.env.REVIEW_FIELD_NAME);

            // === 1) 이슈 본문에서 값 파싱 (Issue Forms 섹션) ===
            const issue = context.payload.issue;
            const body = issue.body || "";
            const { owner, repo } = context.repo;

            const pick = (label) => {
              const re = new RegExp(`^###\\s*${label}\\s*\\n+([\\s\\S]*?)(?=\\n###|$)`, "m");
              const m = body.match(re);
              return m ? m[1].trim() : "";
            };

            const vPriority  = pick("Priority");          // 예: High
            const vComponent = pick("Component");         // 예: Frontend
            const vSPraw     = pick("Story Points");      // 예: 3

            // === B안: 드롭다운 3개(Due Year/Month/Day) → YYYY-MM-DD 조합 ===
            const y = pick("Due Year");                   // "2025"
            const m = pick("Due Month");                  // "01".."12"
            const d = pick("Due Day");                    // "01".."31"
            let iso = "";
            if (y && m && d) {
              const MM = m.padStart ? m.padStart(2, "0") : m;
              const DD = d.padStart ? d.padStart(2, "0") : d;
              const test = new Date(`${y}-${MM}-${DD}T00:00:00Z`);
              if (!Number.isNaN(test.getTime())) {
                iso = `${y}-${MM}-${DD}`;
              } else {
                ops.push(`⚠️ Due Date: invalid combination ${y}-${m}-${d}`);
              }
            }

            const vSP = Number(vSPraw);

            // === 2) 이슈 → 프로젝트 아이템 보장 ===
            const resIssue = await gql(`
              query($id:ID!){
                node(id:$id){
                  ... on Issue {
                    id number
                    projectItems(first:30){ nodes { id project { id } } }
                  }
                }
              }`, { id: issue.node_id });
            const issueNode = resIssue.node;

            let itemId = issueNode.projectItems.nodes.find(n => n.project.id === project.id)?.id;
            if (!itemId) {
              const add = await gql(`
                mutation($pid:ID!,$content:ID!){
                  addProjectV2ItemById(input:{projectId:$pid, contentId:$content}) {
                    item { id }
                  }
                }`, { pid: project.id, content: issueNode.id });
              itemId = add.addProjectV2ItemById.item.id;
              ops.push(`➕ Added to project "${project.title}" (Issue #${issueNode.number})`);
            } else {
              ops.push(`✓ Already in project "${project.title}" (Issue #${issueNode.number})`);
            }

            // === 3) 필드 값 업데이트 ===
            const updateSelect = async (field, valueText, label) => {
              if (!field?.options?.length || !valueText) return;
              const opt = field.options.find(o => o.name === valueText);
              if (!opt) { ops.push(`⚠️ ${label}: option "${valueText}" not found`); return; }
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$opt:String!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ singleSelectOptionId:$opt }
                  }){ projectV2Item { id } }
                }`, { pid: project.id, item: itemId, fid: field.id, opt: opt.id });
              ops.push(`🔁 ${label} → ${valueText}`);
            };

            const updateNumber = async (field, num, label) => {
              if (!field || Number.isNaN(num)) return;
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$val:Float!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ number:$val }
                  }){ projectV2Item { id } }
                }`, { pid: project.id, item: itemId, fid: field.id, val: num });
              ops.push(`🔁 ${label} → ${num}`);
            };

            const updateDate = async (field, iso, label) => {
              if (!field || !iso) return;
              if (!/^\d{4}-\d{2}-\d{2}$/.test(iso)) { ops.push(`⚠️ ${label}: invalid date "${iso}"`); return; }
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$date:Date!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ date:$date }
                  }){ projectV2Item { id } }
                }`, { pid: project.id, item: itemId, fid: field.id, date: iso });
              ops.push(`🔁 ${label} → ${iso}`);
            };

            await updateSelect(fPriority,  vPriority,  "Priority");
            await updateSelect(fComponent, vComponent, "Component");
            await updateNumber(fSP, vSP,   "Story Points");
            if (iso) await updateDate(fDue, iso, "Due Date");

            // === (옵션) Review Status 기본값 세팅 ===
            if (fReview?.options?.length && process.env.REVIEW_DEFAULT) {
              const opt = fReview.options.find(o => o.name === process.env.REVIEW_DEFAULT);
              if (opt) {
                await gql(`
                  mutation($pid:ID!,$item:ID!,$fid:ID!,$opt:String!){
                    updateProjectV2ItemFieldValue(input:{
                      projectId:$pid, itemId:$item, fieldId:$fid,
                      value:{ singleSelectOptionId:$opt }
                    }){ projectV2Item { id } }
                  }`, { pid: project.id, item: itemId, fid: fReview.id, opt: opt.id });
                ops.push(`🔁 Review Status → ${process.env.REVIEW_DEFAULT}`);
              }
            }

            // === 4) 세로 요약 댓글 달기 (여기에 위치) ===
            const summaryMd = [
              "### 🧾 Work item summary",
              "",
              `- **Priority**: ${vPriority || "-"}`,
              `- **Component**: ${vComponent || "-"}`,
              `- **Story Points**: ${Number.isNaN(vSP) ? "-" : vSP}`,
              `- **Due Date**: ${iso || "-"}`
            ].join("\n");

            await github.rest.issues.createComment({
              owner, repo,
              issue_number: issue.number,
              body: summaryMd,
            });

            // === 5) 액션 Job summary (Actions 탭에서 보기 좋게) ===
            const summary = ops.length ? ops.join('\n') : 'No field changes.';
            console.log(summary);
            await core.summary.addHeading('Project sync result')
              .addRaw(summary.replace(/\n/g,'<br/>'))
              .write();
