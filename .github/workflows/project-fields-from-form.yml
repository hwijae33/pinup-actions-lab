name: Sync issue form to Project fields (USER test)

on:
  issues:
    types: [opened, edited]

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write   # 코멘트 업서트용 (PAT이면 영향 없음)

    env:
      # === 개인 프로젝트 설정 ===
      USER: "hwijae33"
      PROJECT_NUMBER: "4"

      # === Projects 필드명 (철자 완전 일치) ===
      PRIORITY_FIELD_NAME: "Priority"        # Single-select
      COMPONENT_FIELD_NAME: "Component"      # Single-select
      CHANGE_TYPE_FIELD_NAME: "Change Type"  # Single-select
      DUEDATE_FIELD_NAME: "Due Date"         # Date
      SUMMARY_FIELD_NAME: "Summary"          # Text
      DDAY_FIELD_NAME: "D-Day"               # Text

    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}   # Projects write/Repo 권한 있는 토큰
          script: |
            const gql = github.graphql;
            const ops = [];

            // === 0) 프로젝트 메타 조회 ===
            const userLogin = (process.env.USER || "").trim();
            const projectNumber = Number(process.env.PROJECT_NUMBER || "0");
            if (!userLogin)    { core.setFailed("USER is empty"); return; }
            if (!projectNumber){ core.setFailed("PROJECT_NUMBER is empty/invalid"); return; }

            const resUser = await gql(`
              query($login:String!, $num:Int!) {
                user(login:$login){
                  projectV2(number:$num){
                    id title
                    fields(first:100){
                      nodes{
                        ... on ProjectV2FieldCommon       { id name }
                        ... on ProjectV2SingleSelectField { id name options { id name } }
                        ... on ProjectV2DateField         { id name }
                        ... on ProjectV2TextField         { id name }
                      }
                    }
                  }
                }
              }
            `, { login: userLogin, num: projectNumber });

            const project = resUser?.user?.projectV2;
            if (!project) { core.setFailed("Project not found. Check USER/PROJECT_NUMBER."); return; }
            const fields = project.fields.nodes;
            const byName = (n) => fields.find(f => f && f.name === n);

            const fPriority   = byName(process.env.PRIORITY_FIELD_NAME);
            const fComponent  = byName(process.env.COMPONENT_FIELD_NAME);
            const fChangeType = byName(process.env.CHANGE_TYPE_FIELD_NAME);
            const fDue        = byName(process.env.DUEDATE_FIELD_NAME);
            const fSummary    = byName(process.env.SUMMARY_FIELD_NAME);
            const fDDay       = byName(process.env.DDAY_FIELD_NAME);

            // === 1) 이슈 폼 본문 파싱 ===
            const issue = context.payload.issue;
            const body  = issue.body || "";

            const pick = (label) => {
              const re = new RegExp(`^###\\s*${label}\\s*\\n+([\\s\\S]*?)(?=\\n###|$)`, "m");
              const m = body.match(re);
              return m ? m[1].trim() : "";
            };

            // 값 정규화: "No response"/"N/A"/"-" 등은 빈값 처리
            const normalize = (s) => (s || "").trim();
            const emptyLike = (s) =>
              !s || /^no response$/i.test(s) || /^n\/a$/i.test(s) || /^none$/i.test(s) || /^-+$/.test(s);

            let vPriority   = normalize(pick("Priority"));
            let vComponent  = normalize(pick("Component"));
            let vChangeType = normalize(pick("Change Type"));
            let vDue        = normalize(pick("Due Date"));
            if (emptyLike(vDue)) vDue = "";

            // === 2) 이슈 → 프로젝트 아이템 보장 ===
            const resIssue = await gql(`
              query($id:ID!){
                node(id:$id){
                  ... on Issue {
                    id number
                    projectItems(first:30){ nodes { id project { id } } }
                  }
                }
              }`, { id: issue.node_id });
            const issueNode = resIssue.node;

            let itemId = issueNode.projectItems.nodes.find(n => n.project.id === project.id)?.id;
            if (!itemId) {
              const add = await gql(`
                mutation($pid:ID!,$content:ID!){
                  addProjectV2ItemById(input:{projectId:$pid, contentId:$content}) {
                    item { id }
                  }
                }`, { pid: project.id, content: issueNode.id });
              itemId = add.addProjectV2ItemById.item.id;
              ops.push(`➕ Added to project "${project.title}" (Issue #${issueNode.number})`);
            } else {
              ops.push(`✓ Already in project "${project.title}" (Issue #${issueNode.number})`);
            }

            // === 3) 현재 Due Date 읽기 (UI 수정 존중) ===
            let currentDue = "";
            if (fDue) {
              const resVals = await gql(`
                query($item: ID!) {
                  node(id: $item) {
                    ... on ProjectV2Item {
                      fieldValues(first: 50) {
                        nodes {
                          ... on ProjectV2ItemFieldDateValue {
                            date
                            field { ... on ProjectV2FieldCommon { id name } }
                          }
                        }
                      }
                    }
                  }
                }`, { item: itemId });

              currentDue = resVals?.node?.fieldValues?.nodes
                ?.find(n => n?.field?.id === fDue?.id)?.date || "";
            }

            // === 4) Due Date 결정 (가드) ===
            let isoDue = "";
            if (/^\d{4}-\d{2}-\d{2}$/.test(vDue)) {
              const test = new Date(`${vDue}T00:00:00Z`);
              if (!Number.isNaN(test.getTime())) isoDue = vDue;
              else ops.push(`⚠️ Due Date invalid date: ${vDue}`);
            } else if (!vDue && !currentDue) {
              const todayKST = new Date().toLocaleString('sv-SE', { timeZone: 'Asia/Seoul' }).slice(0,10);
              isoDue = todayKST;
              ops.push(`ℹ️ Due Date empty → defaulting to ${isoDue} (KST today)`);
            }

            // === 5) 공통 업데이트 함수 ===
            const updateSelect = async (field, valueText, label) => {
              if (!field?.options?.length || !valueText) return;
              const opt = field.options.find(o => o.name === valueText);
              if (!opt) { ops.push(`⚠️ ${label}: option "${valueText}" not found`); return; }
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$opt:String!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ singleSelectOptionId:$opt }
                  }){ projectV2Item { id } }
                }`, { pid: project.id, item: itemId, fid: field.id, opt: opt.id });
              ops.push(`🔁 ${label} → ${valueText}`);
            };

            const updateDate = async (field, dateIso, label) => {
              if (!field || !dateIso) return;
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$date:Date!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ date:$date }
                  }){ projectV2Item { id } }
                }`, { pid: project.id, item: itemId, fid: field.id, date: dateIso });
              ops.push(`🔁 ${label} → ${dateIso}`);
            };

            const updateText = async (field, text, label) => {
              if (!field || !text) return;
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$txt:String!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ text:$txt }
                  }){ projectV2Item { id } }
                }`, { pid: project.id, item: itemId, fid: field.id, txt: text });
              ops.push(`🔁 ${label} → ${text}`);
            };

            // === 6) 필드 쓰기 (기본 4종) ===
            await updateSelect(fPriority,   vPriority,   "Priority");
            await updateSelect(fComponent,  vComponent,  "Component");
            await updateSelect(fChangeType, vChangeType, "Change Type");
            if (isoDue && isoDue !== currentDue) {
              await updateDate(fDue, isoDue, "Due Date");
            } else if (isoDue && isoDue === currentDue) {
              ops.push(`✓ Due Date unchanged (${currentDue})`);
            } else if (!isoDue && currentDue) {
              ops.push(`✓ Due Date kept from project (${currentDue})`);
            }

            // === 7) 가독성 보강: Summary / D-Day 채우기 ===
            function diffDaysKST(iso){
              if (!iso) return null;
              const tz = "Asia/Seoul";
              const todayStr = new Date().toLocaleString("sv-SE", { timeZone: tz }).slice(0,10);
              const [ty,tm,td] = todayStr.split("-").map(Number);
              const [y,m,d]    = iso.split("-").map(Number);
              const t0 = Date.UTC(ty, tm-1, td);
              const d0 = Date.UTC(y, m-1, d);
              return Math.round((d0 - t0) / 86400000);
            }
            function ddayLabel(n){ if (n===0) return "D-Day"; return n>0 ? `D-${n}` : `D+${Math.abs(n)}`; }

            const isoForBadge = isoDue || currentDue || "";
            const dDiff = isoForBadge ? diffDaysKST(isoForBadge) : null;

            const prMap = { Critical:"🔥 Critical", High:"🚨 High", Medium:"⚖️ Medium", Low:"💤 Low" };
            const ctMap = { feat:"🌟 feat", fix:"🛠 fix", refactor:"♻️ refactor", docs:"📝 docs", perf:"⚡ perf",
                            chore:"🧹 chore", test:"✅ test", ci:"🤖 ci", build:"📦 build", revert:"↩️ revert" };

            const parts = [];
            if (vChangeType) parts.push(ctMap[vChangeType] || `🏷 ${vChangeType}`);
            if (vComponent)  parts.push(`🧩 ${vComponent}`);
            if (vPriority)   parts.push(prMap[vPriority] || vPriority);
            if (isoForBadge) parts.push(`⏰ ${isoForBadge} (${ddayLabel(dDiff)})`);

            const summaryText = parts.join(" · ");
            if (fSummary && summaryText) await updateText(fSummary, summaryText, process.env.SUMMARY_FIELD_NAME);
            if (fDDay && dDiff !== null) await updateText(fDDay, ddayLabel(dDiff), process.env.DDAY_FIELD_NAME);

            // === 8) 이슈 본문에 마크다운 요약 코멘트 업서트 (lint-friendly) ===
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const marker = "<!-- project-sync-summary -->";

            const prettyDate = isoForBadge
              ? new Intl.DateTimeFormat("en-US", { month:"short", day:"numeric", year:"numeric", timeZone:"Asia/Seoul" })
                  .format(new Date(isoForBadge+"T00:00:00+09:00"))
              : "";

            const mdLines = [
              marker,
              "### 🧾 Summary",
              `- **Priority:** ${vPriority || "_(none)_"}`,
              `- **Component:** ${vComponent || "_(none)_"}`,
              `- **Change Type:** ${vChangeType || "_(none)_"}`,
              `- **Due Date:** ${isoForBadge ? `${prettyDate} (${ddayLabel(dDiff)})` : "_(none)_"}`,
              "",
              "> 필드는 프로젝트 카드에도 동기화됩니다. Due Date는 폼/프로젝트가 비어 있으면 KST 오늘로 기본 설정됩니다.",
              marker
            ];
            const md = mdLines.join("\n");

            const list = await github.rest.issues.listComments({ owner, repo, issue_number: issue.number, per_page: 100 });
            const existing = (list.data || []).find(c => (c.body || "").includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body: md });
              ops.push("📝 Updated summary comment");
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: issue.number, body: md });
              ops.push("📝 Created summary comment");
            }

            // === 9) 로그 ===
            console.log(ops.length ? ops.join('\n') : 'No field changes.');
