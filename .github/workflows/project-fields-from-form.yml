name: Sync issue form to Project fields (no labels)

on:
  issues:
    types: [opened, edited]   # Ïù¥Ïäà ÏÉùÏÑ±/ÏàòÏ†ï ÏãúÎßàÎã§ Î∞òÏòÅ

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      USER: "hwijae33"        # Í∞úÏù∏ ÌîÑÎ°úÏ†ùÌä∏ ‚Üí USERÎßå ÏÇ¨Ïö©
      PROJECT_NUMBER: "4"     # ÌîÑÎ°úÏ†ùÌä∏ Î≤àÌò∏ (URLÏùò ÎßàÏßÄÎßâ Ïà´Ïûê)
      PRIORITY_FIELD_NAME: "Priority"
      COMPONENT_FIELD_NAME: "Component"
      STORYPOINTS_FIELD_NAME: "Story Points"
      DUEDATE_FIELD_NAME: "Due Date"
      REVIEW_FIELD_NAME: "Review Status"  # (ÏûàÏúºÎ©¥) Í∏∞Î≥∏Í∞í PendingÏúºÎ°ú ÎÑ£Ïñ¥Î≥º Ïàò ÏûàÏùå
      REVIEW_DEFAULT: "Pending"

    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}
          script: |
            const gql = github.graphql;
            const ops = [];

            // === 0) ÌîÑÎ°úÏ†ùÌä∏/ÌïÑÎìú Î©îÌÉÄ ===
            const userLogin = process.env.USER.trim();
            const projectNumber = Number(process.env.PROJECT_NUMBER);

            const { user } = await gql(`
              query($login:String!, $num:Int!) {
                user(login:$login){
                  projectV2(number:$num){
                    id
                    title
                    fields(first:100){
                      nodes{
                        ... on ProjectV2FieldCommon { id name }
                        ... on ProjectV2SingleSelectField { id name options { id name } }
                      }
                    }
                  }
                }
              }
            `, { login: userLogin, num: projectNumber });

            if (!user?.projectV2) { core.setFailed("Project not found"); return; }
            const project = user.projectV2;
            const fields = project.fields.nodes;
            const findField = (n) => fields.find(f => f && f.name === n);

            const fPriority  = findField(process.env.PRIORITY_FIELD_NAME);
            const fComponent = findField(process.env.COMPONENT_FIELD_NAME);
            const fSP        = findField(process.env.STORYPOINTS_FIELD_NAME);
            const fDue       = findField(process.env.DUEDATE_FIELD_NAME);
            const fReview    = findField(process.env.REVIEW_FIELD_NAME);

            // === 1) Ïù¥Ïäà Î≥∏Î¨∏ÏóêÏÑú Í∞í ÌååÏã± (Ïù¥Ïäà Ìèº ÏÑπÏÖò) ===
            const issue = context.payload.issue;
            const body = issue.body || "";

            // ÏÑπÏÖò ÎùºÎ≤® ÌÖçÏä§Ìä∏Îäî ÌèºÏùò labelÍ≥º ÎèôÏùºÌïòÍ≤å Îì§Ïñ¥Ïò¥
            const pick = (label) => {
              const re = new RegExp(`^###\\s*${label}\\s*\\n+([\\s\\S]*?)(?=\\n###|$)`, "m");
              const m = body.match(re);
              return m ? m[1].trim() : "";
            };

            const vPriority  = pick("Priority");           // "High" Îì±
            const vComponent = pick("Component");          // "Frontend" Îì±
            const vSPraw     = pick("Story Points");       // "3"
            const vDue       = pick("Due Date (YYYY-MM-DD)"); // "2025-09-15"

            const vSP = Number(vSPraw);
            // === 2) Ïù¥Ïäà ‚Üí ÌîÑÎ°úÏ†ùÌä∏ ÏïÑÏù¥ÌÖú Î≥¥Ïû• ===
            const resIssue = await gql(`
              query($id:ID!){
                node(id:$id){
                  ... on Issue {
                    id number
                    projectItems(first:30){ nodes { id project { id } } }
                  }
                }
              }`, { id: issue.node_id });
            const issueNode = resIssue.node;

            let itemId = issueNode.projectItems.nodes.find(n => n.project.id === project.id)?.id;
            if (!itemId) {
              const add = await gql(`
                mutation($pid:ID!,$content:ID!){
                  addProjectV2ItemById(input:{projectId:$pid, contentId:$content}) {
                    item { id }
                  }
                }`, { pid: project.id, content: issueNode.id });
              itemId = add.addProjectV2ItemById.item.id;
              ops.push(`‚ûï Added to project "${project.title}" (Issue #${issueNode.number})`);
            } else {
              ops.push(`‚úì Already in project "${project.title}" (Issue #${issueNode.number})`);
            }

            // === 3) ÌïÑÎìú Í∞í Ïì∞Í∏∞ ===
            const updateSelect = async (field, valueText, label) => {
              if (!field?.options?.length || !valueText) return;
              const opt = field.options.find(o => o.name === valueText);
              if (!opt) { ops.push(`‚ö†Ô∏è ${label}: option "${valueText}" not found`); return; }
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$opt:String!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ singleSelectOptionId:$opt }
                  }){ projectV2Item { id } }
                }`, { pid: project.id, item: itemId, fid: field.id, opt: opt.id });
              ops.push(`üîÅ ${label} ‚Üí ${valueText}`);
            };

            const updateNumber = async (field, num, label) => {
              if (!field || Number.isNaN(num)) return;
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$val:Float!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ number:$val }
                  }){ projectV2Item { id } }
                }`, { pid: project.id, item: itemId, fid: field.id, val: num });
              ops.push(`üîÅ ${label} ‚Üí ${num}`);
            };

            const updateDate = async (field, iso, label) => {
              if (!field || !iso) return;
              // YYYY-MM-DD ÌòïÏãùÎßå ÌóàÏö©(Í∞ÑÎã® Í≤ÄÏ¶ù)
              if (!/^\d{4}-\d{2}-\d{2}$/.test(iso)) { ops.push(`‚ö†Ô∏è ${label}: invalid date "${iso}"`); return; }
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$date:Date!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ date:$date }
                  }){ projectV2Item { id } }
                }`, { pid: project.id, item: itemId, fid: field.id, date: iso });
              ops.push(`üîÅ ${label} ‚Üí ${iso}`);
            };

            await updateSelect(fPriority,  vPriority,  "Priority");
            await updateSelect(fComponent, vComponent, "Component");
            await updateNumber(fSP, vSP,   "Story Points");
            await updateDate(fDue, vDue,   "Due Date");

            // (ÏòµÏÖò) Review Status ÌïÑÎìúÍ∞Ä ÏûàÏúºÎ©¥ Í∏∞Î≥∏Í∞í Pending
            if (fReview?.options?.length && process.env.REVIEW_DEFAULT) {
              const opt = fReview.options.find(o => o.name === process.env.REVIEW_DEFAULT);
              if (opt) {
                await gql(`
                  mutation($pid:ID!,$item:ID!,$fid:ID!,$opt:ID!){
                    updateProjectV2ItemFieldValue(input:{
                      projectId:$pid, itemId:$item, fieldId:$fid,
                      value:{ singleSelectOptionId:$opt }
                    }){ projectV2Item { id } }
                  }`, { pid: project.id, item: itemId, fid: fReview.id, opt: opt.id });
                ops.push(`üîÅ Review Status ‚Üí ${process.env.REVIEW_DEFAULT}`);
              }
            }

            // ÏöîÏïΩ Ï∂úÎ†•
            const summary = ops.length ? ops.join('\n') : 'No field changes.';
            console.log(summary);
            await core.summary.addHeading('Project sync result')
              .addRaw(summary.replace(/\n/g,'<br/>'))
              .write();
