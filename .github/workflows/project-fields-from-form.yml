name: Sync issue form to Project fields (USER test)

on:
  issues:
    types: [opened, edited]
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Manual sync target issue number"
        required: true
        type: number

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write   # ÏöîÏïΩ ÏΩîÎ©òÌä∏ ÏóÖÏÑúÌä∏Ïö©

    env:
      # === Í∞úÏù∏ ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Ï†ï ===
      USER: "hwijae33"
      PROJECT_NUMBER: "4"

      # === Projects ÌïÑÎìúÎ™Ö (Ï≤†Ïûê ÏôÑÏ†Ñ ÏùºÏπò) ===
      PRIORITY_FIELD_NAME: "Priority"        # Single-select
      COMPONENT_FIELD_NAME: "Component"      # Single-select
      CHANGE_TYPE_FIELD_NAME: "Change Type"  # Single-select
      DUEDATE_FIELD_NAME: "Due Date"         # Date
      SUMMARY_FIELD_NAME: "Summary"          # Text (ÏÑ†ÌÉù)
      DDAY_FIELD_NAME: "D-Day"               # Text (ÏÑ†ÌÉù)

    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}   # Projects write/Repo Í∂åÌïú ÏûàÎäî ÌÜ†ÌÅ∞
          script: |
            const gql = github.graphql;
            const ops = [];

            // === 0) ÌîÑÎ°úÏ†ùÌä∏ Î©îÌÉÄ Ï°∞Ìöå ===
            const userLogin = (process.env.USER || "").trim();
            const projectNumber = Number(process.env.PROJECT_NUMBER || "0");
            if (!userLogin)    { core.setFailed("USER is empty"); return; }
            if (!projectNumber){ core.setFailed("PROJECT_NUMBER is empty/invalid"); return; }

            const resUser = await gql(`
              query($login:String!, $num:Int!) {
                user(login:$login){
                  projectV2(number:$num){
                    id title
                    fields(first:100){
                      nodes{
                        ... on ProjectV2FieldCommon       { id name }
                        ... on ProjectV2SingleSelectField { id name options { id name } }
                      }
                    }
                  }
                }
              }
            `, { login: userLogin, num: projectNumber });

            const project = resUser?.user?.projectV2;
            if (!project) { core.setFailed("Project not found. Check USER/PROJECT_NUMBER."); return; }
            const fields = project.fields.nodes;
            const byName = (n) => fields.find(f => f && f.name === n);

            const fPriority   = byName(process.env.PRIORITY_FIELD_NAME);
            const fComponent  = byName(process.env.COMPONENT_FIELD_NAME);
            const fChangeType = byName(process.env.CHANGE_TYPE_FIELD_NAME);
            const fDue        = byName(process.env.DUEDATE_FIELD_NAME);
            const fSummary    = byName(process.env.SUMMARY_FIELD_NAME);
            const fDDay       = byName(process.env.DDAY_FIELD_NAME);

            // === 1) ÎåÄÏÉÅ Ïù¥Ïäà Í≤∞Ï†ï (auto vs manual) ===
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            let issue;

            if (context.eventName === "workflow_dispatch") {
              const num = Number(core.getInput("issue_number"));
              if (!num) { core.setFailed("workflow_dispatch requires issue_number"); return; }
              const { data } = await github.rest.issues.get({ owner, repo, issue_number: num });
              issue = data;
            } else {
              issue = context.payload.issue;
            }

            // === 2) Ïù¥Ïäà Ìèº Î≥∏Î¨∏ ÌååÏã± ===
            const body  = issue.body || "";
            const pick = (label) => {
              const re = new RegExp(`^###\\s*${label}\\s*\\n+([\\s\\S]*?)(?=\\n###|$)`, "m");
              const m = body.match(re);
              return m ? m[1].trim() : "";
            };
            // ÎßàÌÅ¨Îã§Ïö¥ Í∏∞Ìò∏ Ï†úÍ±∞ + Ìä∏Î¶¨Î∞ç
            const stripMd = (s) => (s || "").replace(/(^_+|_+$)/g,"").replace(/[*`~>|]/g,"").trim();
            // ÎπàÍ∞íÏ≤òÎüº Î≥¥Ïù¥Îäî Î¨∏ÏûêÏó¥
            const emptyLike = (s) => !s || /^no response$/i.test(s) || /^n\/a$/i.test(s) || /^none$/i.test(s) || /^-+$/.test(s);

            let vPriority   = stripMd(pick("Priority"));
            let vComponent  = stripMd(pick("Component"));
            let vChangeType = stripMd(pick("Change Type"));
            let vDue        = stripMd(pick("Due Date"));
            if (emptyLike(vDue)) vDue = "";

            // === 3) Ïù¥Ïäà ‚Üí ÌîÑÎ°úÏ†ùÌä∏ ÏïÑÏù¥ÌÖú Î≥¥Ïû• ===
            const resIssue = await gql(`
              query($id:ID!){
                node(id:$id){
                  ... on Issue {
                    id number
                    projectItems(first:30){ nodes { id project { id } } }
                  }
                }
              }`, { id: issue.node_id });

            const issueNode = resIssue.node;
            let itemId = issueNode.projectItems.nodes.find(n => n.project.id === project.id)?.id;
            if (!itemId) {
              const add = await gql(`
                mutation($pid:ID!,$content:ID!){
                  addProjectV2ItemById(input:{projectId:$pid, contentId:$content}) {
                    item { id }
                  }
                }`, { pid: project.id, content: issueNode.id });
              itemId = add.addProjectV2ItemById.item.id;
              ops.push(`‚ûï Added to project "${project.title}" (Issue #${issueNode.number})`);
            } else {
              ops.push(`‚úì Already in project "${project.title}" (Issue #${issueNode.number})`);
            }

            // === 4) ÌòÑÏû¨ Due Date ÏùΩÍ∏∞ (UI ÏàòÏ†ï Ï°¥Ï§ë) ===
            let currentDue = "";
            if (fDue) {
              const resVals = await gql(`
                query($item: ID!) {
                  node(id: $item) {
                    ... on ProjectV2Item {
                      fieldValues(first: 50) {
                        nodes {
                          ... on ProjectV2ItemFieldDateValue {
                            date
                            field { ... on ProjectV2FieldCommon { id name } }
                          }
                        }
                      }
                    }
                  }
                }`, { item: itemId });
              currentDue = resVals?.node?.fieldValues?.nodes?.find(n => n?.field?.id === fDue?.id)?.date || "";
            }

            // === 5) Due Date Í≤∞Ï†ï (ÌèºÏù¥ ÎπÑÏñ¥ ÏûàÍ≥† ÌîÑÎ°úÏ†ùÌä∏ÎèÑ ÎπÑÎ©¥ KST Ïò§Îäò) ===
            let isoDue = "";
            if (/^\d{4}-\d{2}-\d{2}$/.test(vDue)) {
              const test = new Date(`${vDue}T00:00:00Z`);
              if (!Number.isNaN(test.getTime())) isoDue = vDue;
              else ops.push(`‚ö†Ô∏è Due Date invalid date: ${vDue}`);
            } else if (!vDue && !currentDue) {
              const todayKST = new Date().toLocaleString('sv-SE', { timeZone: 'Asia/Seoul' }).slice(0,10);
              isoDue = todayKST;
              ops.push(`‚ÑπÔ∏è Due Date empty ‚Üí defaulting to ${isoDue} (KST today)`);
            }

            // === 6) Í≥µÌÜµ ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò ===
            const updateSelect = async (field, valueText, label) => {
              if (!field?.options?.length || !valueText) return;
              const opt = field.options.find(o => o.name === valueText);
              if (!opt) { ops.push(`‚ö†Ô∏è ${label}: option "${valueText}" not found`); return; }
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$opt:String!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ singleSelectOptionId:$opt }
                  }){ projectV2Item { id } }
                }`, { pid: project.id, item: itemId, fid: field.id, opt: opt.id });
              ops.push(`üîÅ ${label} ‚Üí ${valueText}`);
            };
            const updateDate = async (field, dateIso, label) => {
              if (!field || !dateIso) return;
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$date:Date!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ date:$date }
                  }){ projectV2Item { id } }
                }`, { pid: project.id, item: itemId, fid: field.id, date: dateIso });
              ops.push(`üîÅ ${label} ‚Üí ${dateIso}`);
            };
            const updateText = async (field, text, label) => {
              if (!field || !text) return;
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$txt:String!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ text:$txt }
                  }){ projectV2Item { id } }
                }`, { pid: project.id, item: itemId, fid: field.id, txt: text });
              ops.push(`üîÅ ${label} ‚Üí ${text}`);
            };

            // === 7) ÌïÑÎìú Ïì∞Í∏∞ (Í∏∞Î≥∏ 4Ï¢Ö) ===
            await updateSelect(fPriority,   vPriority,   "Priority");
            await updateSelect(fComponent,  vComponent,  "Component");
            await updateSelect(fChangeType, vChangeType, "Change Type");
            if (isoDue && isoDue !== currentDue) {
              await updateDate(fDue, isoDue, "Due Date");
            } else if (isoDue && isoDue === currentDue) {
              ops.push(`‚úì Due Date unchanged (${currentDue})`);
            } else if (!isoDue && currentDue) {
              ops.push(`‚úì Due Date kept from project (${currentDue})`);
            }

            // === 8) Í∞ÄÎèÖÏÑ± Î≥¥Í∞ï: Summary / D-Day ===
            function diffDaysKST(iso){
              if (!iso) return null;
              const tz = "Asia/Seoul";
              const todayStr = new Date().toLocaleString("sv-SE", { timeZone: tz }).slice(0,10);
              const [ty,tm,td] = todayStr.split("-").map(Number);
              const [y,m,d]    = iso.split("-").map(Number);
              const t0 = Date.UTC(ty, tm-1, td);
              const d0 = Date.UTC(y, m-1, d);
              return Math.round((d0 - t0) / 86400000);
            }
            function ddayLabel(n){ if (n===0) return "D-Day"; return n>0 ? `D-${n}` : `D+${Math.abs(n)}`; }

            const isoForBadge = isoDue || currentDue || "";
            const dDiff = isoForBadge ? diffDaysKST(isoForBadge) : null;

            const prMap = { Critical:"üî• Critical", High:"üö® High", Medium:"‚öñÔ∏è Medium", Low:"üí§ Low" };
            const ctMap = { feat:"üåü feat", fix:"üõ† fix", refactor:"‚ôªÔ∏è refactor", docs:"üìù docs", perf:"‚ö° perf",
                            chore:"üßπ chore", test:"‚úÖ test", ci:"ü§ñ ci", build:"üì¶ build", revert:"‚Ü©Ô∏è revert" };

            const parts = [];
            if (vChangeType) parts.push(ctMap[vChangeType] || `üè∑ ${vChangeType}`);
            if (vComponent)  parts.push(`üß© ${vComponent}`);
            if (vPriority)   parts.push(prMap[vPriority] || vPriority);
            if (isoForBadge) parts.push(`‚è∞ ${isoForBadge} (${ddayLabel(dDiff)})`);

            const summaryText = parts.join(" ¬∑ ");
            if (fSummary && summaryText) await updateText(fSummary, summaryText, process.env.SUMMARY_FIELD_NAME);
            if (fDDay && dDiff !== null) await updateText(fDDay, ddayLabel(dDiff), process.env.DDAY_FIELD_NAME);

            // === 9) Ïù¥Ïäà Î≥∏Î¨∏Ïóê ÏöîÏïΩ ÏΩîÎ©òÌä∏ ÏóÖÏÑúÌä∏ ===
            const marker = "<!-- project-sync-summary -->";
            const prettyDate = isoForBadge
              ? new Intl.DateTimeFormat("en-US", { month:"short", day:"numeric", year:"numeric", timeZone:"Asia/Seoul" })
                  .format(new Date(isoForBadge+"T00:00:00+09:00"))
              : "";

            const mdLines = [
              marker,
              "### üßæ Summary",
              `- **Priority:** ${vPriority || "_(none)_"}`,
              `- **Component:** ${vComponent || "_(none)_"}`,
              `- **Change Type:** ${vChangeType || "_(none)_"}`,
              `- **Due Date:** ${isoForBadge ? `${prettyDate} (${ddayLabel(dDiff)})` : "_(none)_"}`,
              "",
              "> ÌïÑÎìúÎäî ÌîÑÎ°úÏ†ùÌä∏ Ïπ¥ÎìúÏóêÎèÑ ÎèôÍ∏∞ÌôîÎê©ÎãàÎã§. Due DateÎäî Ìèº/ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÎπÑÏñ¥ ÏûàÏúºÎ©¥ KST Ïò§ÎäòÎ°ú Í∏∞Î≥∏ ÏÑ§Ï†ïÎê©ÎãàÎã§.",
              marker
            ];
            const md = mdLines.join("\n");

            const list = await github.rest.issues.listComments({ owner, repo, issue_number: issue.number, per_page: 100 });
            const existing = (list.data || []).find(c => (c.body || "").includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body: md });
              ops.push("üìù Updated summary comment");
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: issue.number, body: md });
              ops.push("üìù Created summary comment");
            }

            // === 10) Î°úÍ∑∏ ===
            console.log(ops.length ? ops.join('\n') : 'No field changes.');
