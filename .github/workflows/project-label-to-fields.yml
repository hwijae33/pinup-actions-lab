name: Sync labels to Project fields

on:
  issues:
    types: [opened, edited, labeled, unlabeled, milestoned, demilestoned]

jobs:
  sync-project-fields:
    runs-on: ubuntu-latest
    env:
      USER: "hwijae33"        # ★ 개인 프로젝트: USER만 채움
      PROJECT_NUMBER: "4"     # ★ 프로젝트 번호 (URL의 마지막 숫자)
      PRIORITY_PREFIX: "priority/"
      COMPONENT_PREFIX: "component/"
      STORYPOINTS_PREFIX: "sp/"
      PRIORITY_MAP: "critical:Critical,high:High,medium:Medium,low:Low"
      PRIORITY_FIELD_NAME: "Priority"
      COMPONENT_FIELD_NAME: "Component"
      STORYPOINTS_FIELD_NAME: "Story Points"
      DUEDATE_FIELD_NAME: "Due Date"

    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}
          script: |
            const gql = github.graphql;
            const ops = []; // 변경 내역

            const userLogin = (process.env.USER || "").trim();
            const projectNumber = Number(process.env.PROJECT_NUMBER);
            if (!userLogin) { core.setFailed("USER is empty"); return; }

            // 1) 프로젝트/필드
            const { user } = await gql(`
              query($login:String!, $num:Int!) {
                user(login:$login){
                  projectV2(number:$num){
                    id
                    title
                    fields(first:100){
                      nodes{
                        ... on ProjectV2FieldCommon { id name }
                        ... on ProjectV2SingleSelectField { id name options { id name } }
                      }
                    }
                  }
                }
              }`, { login: userLogin, num: projectNumber });
            if (!user?.projectV2) { core.setFailed("Project not found"); return; }
            const project = user.projectV2;
            const fields = project.fields.nodes;

            // 2) 이슈
            const res = await gql(`
              query($id:ID!){
                node(id:$id){
                  ... on Issue {
                    id number
                    labels(first:50){ nodes { name } }
                    milestone { dueOn }
                    projectItems(first:30){ nodes { id project { id } } }
                  }
                }
              }`, { id: context.payload.issue.node_id });
            const issueNode = res.node;

            // 3) 프로젝트 아이템 확인/추가
            let itemId = issueNode.projectItems.nodes.find(n => n.project.id === project.id)?.id;
            if (!itemId) {
              const add = await gql(`
                mutation($pid:ID!,$content:ID!){
                  addProjectV2ItemById(input:{projectId:$pid, contentId:$content}) {
                    item { id }
                  }
                }`, { pid: project.id, content: issueNode.id });
              itemId = add.addProjectV2ItemById.item.id;
              ops.push(`➕ Added to project "${project.title}" (Issue #${issueNode.number})`);
            } else {
              ops.push(`✓ Already in project "${project.title}" (Issue #${issueNode.number})`);
            }

            // 4) 필드 참조
            const findField = (name) => fields.find(f => f && f.name === name);
            const priorityField  = findField(process.env.PRIORITY_FIELD_NAME);
            const componentField = findField(process.env.COMPONENT_FIELD_NAME);
            const spField        = findField(process.env.STORYPOINTS_FIELD_NAME);
            const dueField       = findField(process.env.DUEDATE_FIELD_NAME);

            // 5) 라벨 파싱
            const labels = (issueNode.labels?.nodes || []).map(l => l.name);
            const parseMap = (s) => Object.fromEntries(
              (s||"").split(',').map(e => e.trim()).filter(Boolean).map(e => {
                const [k,v] = e.split(':').map(x=>x.trim()); return [k, v];
              })
            );

            // Priority
            if (priorityField?.options?.length) {
              const prefix = (process.env.PRIORITY_PREFIX || "").toLowerCase();
              const map = parseMap(process.env.PRIORITY_MAP);
              const prioLabel = labels.find(l => l.toLowerCase().startsWith(prefix));
              if (prioLabel) {
                const key = prioLabel.slice(prefix.length).toLowerCase();
                const optionName = map[key];
                const optionId = priorityField.options.find(o => o.name === optionName)?.id;
                if (optionId) {
                  await gql(`
                    mutation($pid:ID!,$item:ID!,$fid:ID!,$opt:ID!){
                      updateProjectV2ItemFieldValue(input:{
                        projectId:$pid, itemId:$item, fieldId:$fid,
                        value:{ singleSelectOptionId:$opt }
                      }){ projectV2Item { id } }
                  }`, { pid: project.id, item: itemId, fid: priorityField.id, opt: optionId });
                  ops.push(`🔁 Priority → ${optionName}`);
                } else {
                  ops.push(`⚠️ Priority option missing for key "${key}"`);
                }
              }
            }

            // Component
            if (componentField?.options?.length) {
              const prefix = (process.env.COMPONENT_PREFIX || "").toLowerCase();
              const compLabel = labels.find(l => l.toLowerCase().startsWith(prefix));
              if (compLabel) {
                const name = compLabel.slice(prefix.length);
                const opt = componentField.options.find(o => o.name.toLowerCase() === name.toLowerCase());
                if (opt) {
                  await gql(`
                    mutation($pid:ID!,$item:ID!,$fid:ID!,$opt:ID!){
                      updateProjectV2ItemFieldValue(input:{
                        projectId:$pid, itemId:$item, fieldId:$fid,
                        value:{ singleSelectOptionId:$opt }
                      }){ projectV2Item { id } }
                  }`, { pid: project.id, item: itemId, fid: componentField.id, opt: opt.id });
                  ops.push(`🔁 Component → ${opt.name}`);
                } else {
                  ops.push(`⚠️ Component option missing for name "${name}"`);
                }
              }
            }

            // Story Points
            if (spField) {
              const prefix = (process.env.STORYPOINTS_PREFIX || "").toLowerCase();
              const spLabel = labels.find(l => l.toLowerCase().startsWith(prefix));
              if (spLabel) {
                const num = Number(spLabel.slice(prefix.length));
                if (!Number.isNaN(num)) {
                  await gql(`
                    mutation($pid:ID!,$item:ID!,$fid:ID!,$val:Float!){
                      updateProjectV2ItemFieldValue(input:{
                        projectId:$pid, itemId:$item, fieldId:$fid,
                        value:{ number:$val }
                      }){ projectV2Item { id } }
                  }`, { pid: project.id, item: itemId, fid: spField.id, val: num });
                  ops.push(`🔁 Story Points → ${num}`);
                }
              }
            }

            // Due Date
            if (dueField && issueNode.milestone?.dueOn) {
              await gql(`
                mutation($pid:ID!,$item:ID!,$fid:ID!,$date:Date!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$pid, itemId:$item, fieldId:$fid,
                    value:{ date:$date }
                  }){ projectV2Item { id } }
              }`, { pid: project.id, item: itemId, fid: dueField.id, date: issueNode.milestone.dueOn });
              ops.push(`🔁 Due Date → ${issueNode.milestone.dueOn}`);
            }

            // (선택) 현재 아이템의 필드 값 스냅샷 출력
            const snapshot = await gql(`
              query($item:ID!){
                node(id:$item){
                  ... on ProjectV2Item {
                    id
                    fieldValues(first:50){
                      nodes{
                        ... on ProjectV2ItemFieldSingleSelectValue { field { ... on ProjectV2SingleSelectField { name } } name }
                        ... on ProjectV2ItemFieldNumberValue { field { name } number }
                        ... on ProjectV2ItemFieldDateValue   { field { name } date }
                      }
                    }
                  }
                }
              }`, { item: itemId });

            const values = snapshot.node.fieldValues.nodes.map(n => {
              if (n.name) return `${n.field.name}: ${n.name}`;
              if (n.number !== undefined) return `${n.field.name}: ${n.number}`;
              if (n.date) return `${n.field.name}: ${n.date}`;
              return 'unknown';
            });

            const summary = (ops.length ? ops.join('\n') : 'No field changes') + `\n\nCurrent values:\n- ${values.join('\n- ')}`;
            console.log(summary);
            await core.summary.addHeading('Project sync result').addRaw(summary.replace(/\n/g, '<br/>')).write();
