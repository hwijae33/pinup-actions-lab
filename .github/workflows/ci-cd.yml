name: CI/CD Workflow

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

jobs:
  pr-test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3
          DEBUG: 1
          DATA_DIR: /tmp/localstack/data
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    env:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_REGION: us-east-1
      AWS_S3_BUCKET_NAME: pinup-test
      JAVA_TOOL_OPTIONS: >-
        -Daws.chunkedEncodingDisabled=true
        -Dcom.amazonaws.sdk.disableCertChecking=true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create application-test.yml from GitHub Secret (base64 decode)
        run: |
          mkdir -p src/test/resources
          echo "${{ secrets.APPLICATION_TEST_YML }}" | base64 --decode > src/test/resources/application-test.yml

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Run tests
        run: |
          set -o pipefail
          ./gradlew clean test --console=plain --no-daemon | tee test-log.txt

      - name: 💬 PR Comment (Test Result)
        if: always()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: test-result
          message: |
            ${{ job.status == 'success' && '✅ 테스트 통과!' || '❌ 테스트 실패! 로그 확인 필요.' }}

      - name: 📄 실패 테스트 한 줄 요약
        if: failure()
        run: |
          echo "## ❌ 실패한 테스트 목록" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 실패 줄 추출
          FAILED_LINES=$(grep "FAILED" test-log.txt | grep " > " || true)
          COUNT=$(echo "$FAILED_LINES" | grep -c '^' || echo 0)

          # 실패 수 표시
          echo "- 총 실패 테스트 수: **${COUNT}개**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 목록 출력
          echo "$FAILED_LINES" | while read -r line; do
            echo "- ❌ ${line}" >> $GITHUB_STEP_SUMMARY
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_자세한 내용은 'Actions > Run logs' 를 확인하세요._" >> $GITHUB_STEP_SUMMARY

  build:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3
          DEBUG: 1
          DATA_DIR: /tmp/localstack/data
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    env:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_REGION: us-east-1
      AWS_S3_BUCKET_NAME: pinup-test
      JAVA_TOOL_OPTIONS: >-
        -Daws.chunkedEncodingDisabled=true
        -Dcom.amazonaws.sdk.disableCertChecking=true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create application-test.yml from GitHub Secret (base64 decode)
        run: |
          mkdir -p src/test/resources
          echo "${{ secrets.APPLICATION_TEST_YML }}" | base64 --decode > src/test/resources/application-test.yml

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Run build (with test)
        run: ./gradlew clean build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: build/libs/*.jar

  docker-build-push-deploy:
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: build/libs/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Git metadata
        id: vars
        run: |
          echo "SHA_TAG=sha-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "DATE_TAG=build-$(date +%Y%m%d)" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            pinup0106/pinup:latest
            pinup0106/pinup:${{ env.SHA_TAG }}
            pinup0106/pinup:${{ env.DATE_TAG }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull pinup0106/pinup:latest
            docker stop pinup-container || true
            docker rm pinup-container || true
            docker run -d --name pinup-container -p 80:8080 pinup0106/pinup:latest
